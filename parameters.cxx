// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "parameters.hxx"

// parameters_t
// 

const parameters_t::simulation_updatefreq_type& parameters_t::
simulation_updatefreq () const
{
  return this->simulation_updatefreq_.get ();
}

parameters_t::simulation_updatefreq_type& parameters_t::
simulation_updatefreq ()
{
  return this->simulation_updatefreq_.get ();
}

void parameters_t::
simulation_updatefreq (const simulation_updatefreq_type& x)
{
  this->simulation_updatefreq_.set (x);
}

const parameters_t::simulation_realtimefactor_type& parameters_t::
simulation_realtimefactor () const
{
  return this->simulation_realtimefactor_.get ();
}

parameters_t::simulation_realtimefactor_type& parameters_t::
simulation_realtimefactor ()
{
  return this->simulation_realtimefactor_.get ();
}

void parameters_t::
simulation_realtimefactor (const simulation_realtimefactor_type& x)
{
  this->simulation_realtimefactor_.set (x);
}

const parameters_t::window_width_type& parameters_t::
window_width () const
{
  return this->window_width_.get ();
}

parameters_t::window_width_type& parameters_t::
window_width ()
{
  return this->window_width_.get ();
}

void parameters_t::
window_width (const window_width_type& x)
{
  this->window_width_.set (x);
}

const parameters_t::window_height_type& parameters_t::
window_height () const
{
  return this->window_height_.get ();
}

parameters_t::window_height_type& parameters_t::
window_height ()
{
  return this->window_height_.get ();
}

void parameters_t::
window_height (const window_height_type& x)
{
  this->window_height_.set (x);
}

const parameters_t::scale_type& parameters_t::
scale () const
{
  return this->scale_.get ();
}

parameters_t::scale_type& parameters_t::
scale ()
{
  return this->scale_.get ();
}

void parameters_t::
scale (const scale_type& x)
{
  this->scale_.set (x);
}

const parameters_t::mouse_drag_speed_type& parameters_t::
mouse_drag_speed () const
{
  return this->mouse_drag_speed_.get ();
}

parameters_t::mouse_drag_speed_type& parameters_t::
mouse_drag_speed ()
{
  return this->mouse_drag_speed_.get ();
}

void parameters_t::
mouse_drag_speed (const mouse_drag_speed_type& x)
{
  this->mouse_drag_speed_.set (x);
}

const parameters_t::mouse_zoom_speed_type& parameters_t::
mouse_zoom_speed () const
{
  return this->mouse_zoom_speed_.get ();
}

parameters_t::mouse_zoom_speed_type& parameters_t::
mouse_zoom_speed ()
{
  return this->mouse_zoom_speed_.get ();
}

void parameters_t::
mouse_zoom_speed (const mouse_zoom_speed_type& x)
{
  this->mouse_zoom_speed_.set (x);
}

const parameters_t::animation_updatefreq_type& parameters_t::
animation_updatefreq () const
{
  return this->animation_updatefreq_.get ();
}

parameters_t::animation_updatefreq_type& parameters_t::
animation_updatefreq ()
{
  return this->animation_updatefreq_.get ();
}

void parameters_t::
animation_updatefreq (const animation_updatefreq_type& x)
{
  this->animation_updatefreq_.set (x);
}

const parameters_t::visible_centroid_type& parameters_t::
visible_centroid () const
{
  return this->visible_centroid_.get ();
}

parameters_t::visible_centroid_type& parameters_t::
visible_centroid ()
{
  return this->visible_centroid_.get ();
}

void parameters_t::
visible_centroid (const visible_centroid_type& x)
{
  this->visible_centroid_.set (x);
}

const parameters_t::logger_updatefreq_type& parameters_t::
logger_updatefreq () const
{
  return this->logger_updatefreq_.get ();
}

parameters_t::logger_updatefreq_type& parameters_t::
logger_updatefreq ()
{
  return this->logger_updatefreq_.get ();
}

void parameters_t::
logger_updatefreq (const logger_updatefreq_type& x)
{
  this->logger_updatefreq_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// parameters_t
//

parameters_t::
parameters_t (const simulation_updatefreq_type& simulation_updatefreq,
              const simulation_realtimefactor_type& simulation_realtimefactor,
              const window_width_type& window_width,
              const window_height_type& window_height,
              const scale_type& scale,
              const mouse_drag_speed_type& mouse_drag_speed,
              const mouse_zoom_speed_type& mouse_zoom_speed,
              const animation_updatefreq_type& animation_updatefreq,
              const visible_centroid_type& visible_centroid,
              const logger_updatefreq_type& logger_updatefreq)
: ::xml_schema::type (),
  simulation_updatefreq_ (simulation_updatefreq, this),
  simulation_realtimefactor_ (simulation_realtimefactor, this),
  window_width_ (window_width, this),
  window_height_ (window_height, this),
  scale_ (scale, this),
  mouse_drag_speed_ (mouse_drag_speed, this),
  mouse_zoom_speed_ (mouse_zoom_speed, this),
  animation_updatefreq_ (animation_updatefreq, this),
  visible_centroid_ (visible_centroid, this),
  logger_updatefreq_ (logger_updatefreq, this)
{
}

parameters_t::
parameters_t (const parameters_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  simulation_updatefreq_ (x.simulation_updatefreq_, f, this),
  simulation_realtimefactor_ (x.simulation_realtimefactor_, f, this),
  window_width_ (x.window_width_, f, this),
  window_height_ (x.window_height_, f, this),
  scale_ (x.scale_, f, this),
  mouse_drag_speed_ (x.mouse_drag_speed_, f, this),
  mouse_zoom_speed_ (x.mouse_zoom_speed_, f, this),
  animation_updatefreq_ (x.animation_updatefreq_, f, this),
  visible_centroid_ (x.visible_centroid_, f, this),
  logger_updatefreq_ (x.logger_updatefreq_, f, this)
{
}

parameters_t::
parameters_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  simulation_updatefreq_ (this),
  simulation_realtimefactor_ (this),
  window_width_ (this),
  window_height_ (this),
  scale_ (this),
  mouse_drag_speed_ (this),
  mouse_zoom_speed_ (this),
  animation_updatefreq_ (this),
  visible_centroid_ (this),
  logger_updatefreq_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void parameters_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // simulation_updatefreq
    //
    if (n.name () == "simulation_updatefreq" && n.namespace_ ().empty ())
    {
      if (!simulation_updatefreq_.present ())
      {
        this->simulation_updatefreq_.set (simulation_updatefreq_traits::create (i, f, this));
        continue;
      }
    }

    // simulation_realtimefactor
    //
    if (n.name () == "simulation_realtimefactor" && n.namespace_ ().empty ())
    {
      if (!simulation_realtimefactor_.present ())
      {
        this->simulation_realtimefactor_.set (simulation_realtimefactor_traits::create (i, f, this));
        continue;
      }
    }

    // window_width
    //
    if (n.name () == "window_width" && n.namespace_ ().empty ())
    {
      if (!window_width_.present ())
      {
        this->window_width_.set (window_width_traits::create (i, f, this));
        continue;
      }
    }

    // window_height
    //
    if (n.name () == "window_height" && n.namespace_ ().empty ())
    {
      if (!window_height_.present ())
      {
        this->window_height_.set (window_height_traits::create (i, f, this));
        continue;
      }
    }

    // scale
    //
    if (n.name () == "scale" && n.namespace_ ().empty ())
    {
      if (!scale_.present ())
      {
        this->scale_.set (scale_traits::create (i, f, this));
        continue;
      }
    }

    // mouse_drag_speed
    //
    if (n.name () == "mouse_drag_speed" && n.namespace_ ().empty ())
    {
      if (!mouse_drag_speed_.present ())
      {
        this->mouse_drag_speed_.set (mouse_drag_speed_traits::create (i, f, this));
        continue;
      }
    }

    // mouse_zoom_speed
    //
    if (n.name () == "mouse_zoom_speed" && n.namespace_ ().empty ())
    {
      if (!mouse_zoom_speed_.present ())
      {
        this->mouse_zoom_speed_.set (mouse_zoom_speed_traits::create (i, f, this));
        continue;
      }
    }

    // animation_updatefreq
    //
    if (n.name () == "animation_updatefreq" && n.namespace_ ().empty ())
    {
      if (!animation_updatefreq_.present ())
      {
        this->animation_updatefreq_.set (animation_updatefreq_traits::create (i, f, this));
        continue;
      }
    }

    // visible_centroid
    //
    if (n.name () == "visible_centroid" && n.namespace_ ().empty ())
    {
      if (!visible_centroid_.present ())
      {
        this->visible_centroid_.set (visible_centroid_traits::create (i, f, this));
        continue;
      }
    }

    // logger_updatefreq
    //
    if (n.name () == "logger_updatefreq" && n.namespace_ ().empty ())
    {
      if (!logger_updatefreq_.present ())
      {
        this->logger_updatefreq_.set (logger_updatefreq_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!simulation_updatefreq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "simulation_updatefreq",
      "");
  }

  if (!simulation_realtimefactor_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "simulation_realtimefactor",
      "");
  }

  if (!window_width_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "window_width",
      "");
  }

  if (!window_height_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "window_height",
      "");
  }

  if (!scale_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "scale",
      "");
  }

  if (!mouse_drag_speed_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mouse_drag_speed",
      "");
  }

  if (!mouse_zoom_speed_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mouse_zoom_speed",
      "");
  }

  if (!animation_updatefreq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "animation_updatefreq",
      "");
  }

  if (!visible_centroid_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "visible_centroid",
      "");
  }

  if (!logger_updatefreq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "logger_updatefreq",
      "");
  }
}

parameters_t* parameters_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class parameters_t (*this, f, c);
}

parameters_t& parameters_t::
operator= (const parameters_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->simulation_updatefreq_ = x.simulation_updatefreq_;
    this->simulation_realtimefactor_ = x.simulation_realtimefactor_;
    this->window_width_ = x.window_width_;
    this->window_height_ = x.window_height_;
    this->scale_ = x.scale_;
    this->mouse_drag_speed_ = x.mouse_drag_speed_;
    this->mouse_zoom_speed_ = x.mouse_zoom_speed_;
    this->animation_updatefreq_ = x.animation_updatefreq_;
    this->visible_centroid_ = x.visible_centroid_;
    this->logger_updatefreq_ = x.logger_updatefreq_;
  }

  return *this;
}

parameters_t::
~parameters_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::parameters_t >
parameters (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::parameters (isrc, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::parameters (isrc, h, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::parameters (isrc, h, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::parameters (isrc, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::parameters (isrc, h, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::parameters (isrc, h, f, p);
}

::std::auto_ptr< ::parameters_t >
parameters (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::parameters_t > (
    ::parameters (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::parameters_t >
parameters (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::parameters_t > (
      ::parameters (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "parameters" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::parameters_t > r (
      ::xsd::cxx::tree::traits< ::parameters_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "parameters",
    "");
}

::std::auto_ptr< ::parameters_t >
parameters (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "parameters" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::parameters_t > r (
      ::xsd::cxx::tree::traits< ::parameters_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "parameters",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

